<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'[
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6020 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6020.xml">
<!ENTITY RFC6241 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml">
]>


<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>

<rfc category="std" ipr="trust200902" docName="draft-vanderstok-core-yang-LWM2M-00">
  <front>
    <title abbrev="LWM2M-YANG">Mapping from LWM2M model to CoMI YANG model</title>

    <author initials="P." surname="van der Stok" fullname="Peter van der Stok" role="editor" >
      <organization abbrev="consultant">consultant</organization>
      <address>
        <phone>+31-492474673 (Netherlands), +33-966015248 (France)</phone>
        <email>consultancy@vanderstok.org</email>
        <uri>www.vanderstok.org</uri>
      </address>
    </author>

    <author initials="J.J." surname="Jimenez" fullname="Jaime Jimenez">
  		<organization>Ericsson</organization>
  		<address>
  			<postal>
  				<street>Hirsalantie 11</street>
  				<code>02420</code>
  				<city>Jorvas</city>
  				<country>Finland</country>
  			</postal>
        <phone>+358-442992827(Finland)</phone>
  			<email>jaime.jimenez@ericsson.com</email>
  		</address>
  	</author>

    <date />

    <!--
    Jaime: Is this going to be submitted to ROLL or CORE?
    -->

    <area>Routing</area>
    <workgroup>roll</workgroup>
    <abstract>
      <t>
        This document defines a set of rules to convert a LWM2M xml-based device specification to a YANG MODULE. The invocation of the server executing the converted YANG code makes use of CoMI. The mapping from the original LWM2M uri to the corresponding CoMI URI is presented.

      </t>
    </abstract>
    <note title="Note">
      <t>
        Discussion and suggestions for improvement are requested,
        and should be sent to roll@ietf.org.
      </t>
    </note>
  </front>
  <middle>

<section anchor="introduction" title="Introduction">
<t>
Standardization organizations define interfaces hosted by processors to manipulate the connected equipment. Examples of such standardization organizations are BACnet, KNX, ZigBee, oBIX, OMA/IPSO, and many others. These organizations plan to move to resource based interfaces. The data models proposed by these organizations are hierarchical models that can be specified in XML and describe classes with attributes and operations that can be instantiated to objects. An example is the OMA LWM2M (see <xref target="OMNA"/>), that standardizes numbered object types. This document describes rules to translate xml specifications of the LWM2M organization to YANG <xref target="RFC6020"/>.
</t>

<section anchor="terminology" title="Terminology">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>
The following terms are defined in <xref target="RFC6241"/> and are not redefined here:

<list style="symbols">
<t>client</t>
<t>configuration data</t>
<t>server</t>
<t>state data</t>
</list>
The following terms are defined in <xref target="RFC6020"/> and are not redefined here:
<list style="symbols">
<t>data model</t>
<t>data node</t>
</list>
   The terminology for describing YANG data models is found in
   <xref target="RFC6020"/>.
</t>

<section anchor="tree-diagrams" title="Tree Diagrams">
<t>
A simplified graphical representation of the data model is used in the YANG modules specified in
this document.  The meaning of the symbols in these
diagrams is as follows:
</t>
<t>
<list>
<t>Brackets "[" and "]" enclose list keys.</t>
<t>Abbreviations before data node names: "rw" means configuration
data (read-write) and "ro" state data (read-only).</t>
<t>Symbols after data node names: "?" means an optional node, "!" means
a presence container, and "*" denotes a list and leaf-list.</t>
<t>Parentheses enclose choice and case nodes, and case nodes are also marked with a colon (":").</t>
<t>Ellipsis ("...") stands for contents of subtrees that are not shown.</t>
</list>
</t>
</section>  <!-- Tree diagrams  -->

</section>  <!-- Terminology -->
</section>  <!-- Introduction -->

<section anchor="conversion" title="Conversion rules LWM2M to YANG">
<t>
LWM2M objects are typed, where each type is identified with a number. The object provides one or more instances which are numbered. An instance is composed of resources, also identified with numbers. An instance on a host can be accessed with the example URI: http://example.com/type/instance/resource, where resource, instance and type are numbers, specified by the LWM2M specification.
</t><t>
When using YANG, the type identifiers, followed by the resource identifier, are YANG strings instead of numbers.
</t><t>
For an automatic translation from the xml LWM2M specification to a YANG specification, the following rules apply for access, optional, units, and range specifications:
<list style="symbols">
<t>The optional/mandatory aspect of the LWM2M resource is covered by the mandatory "false/true" statement of YANG.</t>
<t>The R,W access aspects of a data item are translated using config parameter. Config "false" means R access, config "true" means RW access.</t>
<t>When the YANG rpc is specified the E access is meant. When input parameters are added, ER access is meant; when output parameters are added, WR access is meant and with both input and output parameters ERW access is meant.</t>
<t>To specify the range of a data resource the YANG range statement is used.</t>
<t>The YANG units statement is used to express the units.</t>
<t>In the YANG specification the LWM2M resources are specified as leafs of a YANG list. The YANG list is preceded by leaf called instance_number which contains the LWM2M instance identifier. The instance_number is declared key in the YANG list.</t>
</list>
</t><t>
By modelling OMA objects as YANG lists, the numbered OMA object instances can be provided by assigning to each list object an "instance" key attribute. The numbering of the instance does not need to be consecutive. The OMA resources are the other leafs of the list object. Consequently, the list element can be referenced by its instance number, as is the case for OMA instances.
</t><t>
The YANG identifiers are strings and need to be mapped to numbered identifiers. The appendices show 4 ways to represent the LWM2M device ID and resource ID in the YANG specification.
<list style="symbols">
<t>In <xref target="Ynumber"/>, illegal YANG identifiers are represented as integers. This approach cannot be compiled by YANG compilers. </t>
<t>In <xref target="IDnumber"/>, Yang Identifiers are modelled as strings that start with string "ID" followed by the identifier number (see  module humidityID).</t>
<t>In <xref target="Yname"/>, Yang Identifiers of types and resources are modelled as strings that represent the type- and resource- name (see  module humidityNM).</t>
<t>In <xref target="Yleaf"/>, the device object is modelled as a container composed of an identifier and a list of instances. The list instance is composed of an instance number and a set of resource containers. The resource container is composed of the pair (attribute identifier number, IPSO resource specification)(see  module humidityLF). </t>
</list>
Below the tree diagrams (see <xref target="tree-diagrams"/> for an explanation) of the three valid YANG modules are shown.
</t>
<figure>
  <artwork align="left"><![CDATA[
module: ietf-yang-humidityID
   +--ro ID3301* [instance_number]
      +--ro instance_number    uint16
      +--ro ID5700             decimal64
      +--ro ID5701?            string
      +--ro ID5601?            decimal64
      +--ro ID5602?            decimal64
      +--ro ID5603?            decimal64
      +--ro ID5604?            decimal64
      +---x ID5605

module: ietf-yang-humidityNM
   +--ro IPSO-humidity* [instance_number]
      +--ro instance_number                      uint16
      +--ro Sensor_Value                         decimal64
      +--ro Units?                               string
      +--ro Min_Measured_Value?                  decimal64
      +--ro Max_Measured_Value?                  decimal64
      +--ro Min_Range_Value?                     decimal64
      +--ro Max_Range_Value?                     decimal64
      +---x Reset_Min_and_Max_measured_values

module: ietf-yang-humidityLF
   +--rw IPSO-humidity
      +--ro identifier    uint16
      +--ro resources* [instance_number]
         +--ro instance_number                      uint16
         +--ro Sensor_Value
         |  +--ro identifier?   uint16
         |  +--ro content       decimal64
         +--ro Units
         |  +--ro identifier?   uint16
         |  +--ro content?      string
         +--ro Min_Measured_Value
         |  +--ro identifier?   uint16
         |  +--ro content?      decimal64
         +--ro Max_Measured_Value
         |  +--ro identifier?   uint16
         |  +--ro content?      decimal64
         +--ro Min_Range_Value
         |  +--ro identifier?   uint16
         |  +--ro content?      decimal64
         +--ro Max_Range_Value
         |  +--ro identifier?   uint16
         |  +--ro content?      decimal64
         +--ro Reset_Min_and_Max_measured_values
            +--ro identifier?   uint16
            +---x reset

]]></artwork>
 </figure>


<t>
<xref target="Yleaf"/> is the most complex one and is not recommended. <xref target="Ynumber"/> is impossible, <xref target="IDnumber"/> works but is a bit forced approach and lacks the resource name. <xref target="Yname"/> is the most natural approach where the YANG identifiers are the device (type) and resource names. CoMI uses the conversion from names to numbers to reduce the payload for the resource requests. This conversion can be used for LWM2M type/resource names.
</t>
</section> <!-- Conversion  -->

<section anchor="uri" title="URI convention">

<t>
The invocation URI of a LWM2M resource looks like:
</t><t>
http://example.com/type/instance/resource
</t><t>
In this section it is assumed that the YANG mapping of <xref target="Yname"/> is used.
</t><t>
When YANG is used, the LWM2M resource invocation can follow the RESTCONF convention using http, or the CoMI convention using CoAP.
</t><t>
When using RESTCONF the invocation will look like:
</t><t>
http://example.com/type/instance=0/resource
</t><t>
In the case of CoMI the type/resource name is converted to a numeric identifier to reduce the payload size. The instance is specified in a query parameter.
Consequently, the LWM2M resource on a host containing a YANG specification is accessed with:
</t><t>
coap:// example.com/type/resource?keys=0
</t><t>
Assuming that IPSO-humidity/Sensor_Value converts to 5700, the URI for the CoMI invocation of instance 0 of IPSO-humidity/Sensor_value will look like:
</t><t>
coap://example.com/5700?keys=0
</t><t>
For LWM2M types with only one instance, the keys=0 can be omitted.

</t>
</section> <!-- URI convention  -->

<section anchor="notification" title="observation and notification">
<t>
Needs text
</t>
</section> <!-- notification -->

<section anchor="extensions" title="YANG extensions to LWM2M">
<t>
In general, by adding keys leafs to a list object, YANG allows additionally the selection of instances by the contents of the key leafs.
</t>
</section> <!-- extensions -->


<section title="Security considerations">
<t>
To be filled in
</t>
</section>


<section title="Acknowledgements">
<t>
We are grateful to
</t>
</section>

<section title="Changelog">
<t>
NO changes from noting to version 00
</t>

</section>

</middle>
  <back>
    <references title="Normative References">
      &RFC2119;
      &RFC6020;
	&RFC6241;
    </references>

    <references title="Informative References">

<reference anchor="OMNA">
        <front>
          <title>Open Mobile Naming Authority (OMNA)</title>
	  <author fullname="Open Mobile Alliance (OMA)"/>
        <date />
          </front>
          <seriesInfo name="Web" value="http://http://technical.openmobilealliance.org/Technical/technical-information/omna"/>
        </reference>

    </references>

<section anchor="Ynumber" title="YANG identifiers as numbers">
<t>
Yang Identifiers are modelled as simple integers. This is not allowed in YANG. The device object is modelled as a list that contains multiple instances.
</t>

<figure><artwork align="left"><![CDATA[

module example-humidity {

  yang-version 1.1;  // needed for action

  namespace
      "urn:ietf:params:xml:ns:yang:example-humidity";

  prefix humid;

  organization
    "Example INC";

  contact
     "WG Web:   http://tools.ietf.org/wg/core/
     WG List:  mailto:core@ietf.org

     WG Chair: Carsten Bormann
               mailto:cabo@tzi.org

     WG Chair: Jaime Jimenez
               mailto:jaime.jimenez@ericsson.com

     Editor:   Peter van der Stok
               mailto:consultancy@vanderstok.org

     Editor:   Jaime Jimenez
               mailto:jaime.jimenez@ericsson.com";

  description
    "This module contains information about the operation of the IPSO LWM2M humidity sensor with ID 3301.

     Copyright (c) 2016 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or

     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

revision "2016-07-20" {
      description "Initial revision.";
      reference
        "I-D:draft-vanderstok-core-yang-lwm2m: YANG language applied to the LWM2M IPSO humidity sensor specification";
    }

    list 3301 {
        key instance_number;
        config  false;           // should be same as for key
        description
          "IPSO humidity: The humidity sensor is composed of a set of instances";
           leaf instance_number {
                type uint16{
                      range "0..1"; // only one instance zero (0)
                }
                config false;    // R access
                mandatory "true";
                description
                   "the number of the humidity sensor instance";
            }
            leaf 5700 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               mandatory "true";
               description
                  "Sensor Value: Last or Current Measured Value from the Sensor";
            }
            leaf 5701 {
               type string;
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                   "Units: Measurement unit definition e.g. 'Cel' for temperature in Celsius";
            }
            leaf 5601 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                 "Min Measured Value: The minimum value measured by the sensor since power ON or reset";
            }
            leaf 5602 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "Max Measured Value: The maximum value measured by the sensor since power ON or reset";
            }
            leaf 5603 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "Min Range Value: The minimum value that can be measured by the sensor";
            }
            leaf 5604 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "Max Range Value: The maximum value that can be measured by the sensor";
            }
            action 5605 {
               // E access: this is an RPC without input and output parameters
               description
                "Reset Min and Max measured values: Reset the Min and Max measured values to current value";
            }
       }  // list humidity 3301
} // module ietf-yang-humidity


]]></artwork>
    </figure>


</section>
<section anchor="IDnumber" title="YANG identifiers as IDnumbers">
<t>
Yang Identifiers are modelled as string that starts with ID followed by the identifier number.
The device object is modelled as a list that contains multiple instances.
</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-humidityID@2016-07-25.yang"
module ietf-humidityID{

  yang-version 1.1;  // needed for action

  namespace
      "urn:ietf:params:xml:ns:yang:ietf-humidityID";

  prefix humid;

  organization
    "IPSO";

  contact
     "WG Web:   http://tools.ietf.org/wg/core/
     WG List:  mailto:core@ietf.org

     WG Chair: Carsten Bormann
               mailto:cabo@tzi.org

     WG Chair: Jaime Jimenez
               mailto:jaime.jimenez@ericsson.com

     Editor:   Peter van der Stok
               mailto:consultancy@vanderstok.org

     Editor:   Jaime Jimenez
               mailto:jaime.jimenez@ericsson.com";

  description
    "This module contains information about the operation of the IPSO LWM2M humidity sensor with ID 3301.

     Copyright (c) 2016 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or

     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

revision "2016-07-25" {
      description "Initial revision.";
      reference
        "I-D:draft-vanderstok-core-yang-LWM2M: YANG language applied to the LWM2M IPSO humidity sensor specification";
    }

    list ID3301 {
      key instance_number;
      config  false;     // should be same for key leaf
      description
        "IPSO humidity: The humidity sensor is composed of a set of instances";
           leaf instance_number {
               type uint16{
                  range "0..1";   // only one instance zero (0)
               }
               config false;    // R access
               mandatory "true";
               description
                "the number of the humidity sensor instance";
            }
            leaf ID5700 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               config false;    // R access
               mandatory "true";
               description
                "Sensor Value: Last or Current Measured Value from the Sensor";
            }
            leaf ID5701 {
               type string;
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "Units: Measurement unit definition e.g. 'Cel' for temperature in Celsius";
            }
            leaf ID5601 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;   // R access
               description
                "Min Measured Value: The minimum value measured by the sensor since power ON or reset";
            }
            leaf ID5602 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "Max Measured Value: The maximum value measured by the sensor since power ON or reset";
            }
            leaf ID5603 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "Min Range Value: The minimum value that can be measured by the sensor";
            }
            leaf ID5604 {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "Max Range Value: The maximum value that can be measured by the sensor";
            }
            action ID5605 {
                //E access: this is an RPC without input and output parameters
               description
                "Reset Min and Max measured values: Reset the Min and Max measured values to current value";
            }
       }  // list ID3301
} // module ietf-yang-humidity

<CODE ENDS>

]]></artwork>
    </figure>


</section>


<section anchor="Yname" title="YANG identifiers as resource names">
<t>
Yang Identifiers are modelled as strings that represent the resource name.
The device object is modelled as a list with multiple instances.
</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-humidityNM@2016-07-25.yang"

module ietf-humidityNM{

  yang-version 1.1;  // needed for action

  namespace
      "urn:ietf:params:xml:ns:yang:ietf-humidityNM";

  prefix humid;

  organization
    "IPSO";

  contact
     "WG Web:   http://tools.ietf.org/wg/core/
     WG List:  mailto:core@ietf.org

     WG Chair: Carsten Bormann
               mailto:cabo@tzi.org

     WG Chair: Jaime Jimenez
               mailto:jaime.jimenez@ericsson.com

     Editor:   Peter van der Stok
               mailto:consultancy@vanderstok.org

     Editor:   Jaime Jimenez
               mailto:jaime.jimenez@ericsson.com";

  description
    "This module contains information about the operation of the IPSO LWM2M humidity sensor with ID 3301.

     Copyright (c) 2016 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or

     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

revision "2016-07-25" {
      description "Initial revision.";
      reference
        "I-D:draft-vanderstok-core-yang-LWM2M: YANG language applied to the LWM2M IPSO humidity sensor specification";
    }


    list IPSO-humidity {
        key instance_number;
        config   false;   //  should be same as key leaf
        description
          "3301: The humidity sensor is composed of a set of instances";
           leaf instance_number {
               type uint16{
                    range "0..1";   // only one instance zero (0)
               }
               config false;    // R access
               mandatory "true";
               description
                "the number of the humidity sensor instance";
            }
            leaf Sensor_Value  {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               mandatory "true";
               description
                "5700: Last or Current Measured Value from the Sensor";
            }
            leaf Units {
               type string;
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "5701: Measurement unit definition e.g. 'Cel' for temperature in Celsius";
            }
            leaf Min_Measured_Value {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "5601: The minimum value measured by the sensor since power ON or reset";
            }
            leaf Max_Measured_Value {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "5602: The maximum value measured by the sensor since power ON or reset";
            }
            leaf Min_Range_Value {
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "5603: The minimum value that can be measured by the sensor";
            }
            leaf Max_Range_Value{
               type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
               units "Defined by 'Units' resource";
               config false;    // R access
               description
                "5604: The maximum value that can be measured by the sensor";
            }
            action Reset_Min_and_Max_measured_values {
               // E access: this is an RPC without input and output parameters
               description
                "5605: Reset the Min and Max measured values to current value";
            }  // rpc
       }  // list ID3301
} // module ietf-yang-humidity

<CODE ENDS>



]]></artwork>
    </figure>


</section>


<section anchor="Yleaf" title="YANG identifiers as additional leaf">
<t>
The device object is modelled as a container composed of an identifier and a list of instances. The list instance is composed of an instance number and a set of resource containers. The resource container is composed of the pair (attribute identifier number, IPSO resource specification).
</t>

<figure><artwork align="left"><![CDATA[

<CODE BEGINS> file "ietf-humidityLF@2016-07-25.yang"

module ietf-humidityLF{

  yang-version 1.1;  // needed for rpc

  namespace
      "urn:ietf:params:xml:ns:yang:ietf-humidityLF";

  prefix humid;

  organization
    "IPSO";

  contact
     "WG Web:   http://tools.ietf.org/wg/core/
     WG List:  mailto:core@ietf.org

     WG Chair: Carsten Bormann
               mailto:cabo@tzi.org

     WG Chair: Jaime Jimenez
               mailto:jaime.jimenez@ericsson.com

     Editor:   Peter van der Stok
               mailto:consultancy@vanderstok.org

     Editor:   Jaime Jimenez
               mailto:jaime.jimenez@ericsson.com";

  description
    "This module contains information about the operation of the IPSO LWM2M humidity sensor with ID 3301.

     Copyright (c) 2016 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or

     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

revision "2016-07-25" {
      description "Initial revision.";
      reference
        "I-D:draft-vanderstok-core-yang-LWM2M: YANG language applied to the LWM2M IPSO humidity sensor specification";
    }

    container IPSO-humidity{
        description
           "Device separated in identifier and list";
        leaf identifier{
           type uint16;  // fixed to 3301
           config false;
           mandatory "true";
           description
            "the LWM2M identification number of the device";
        }
        list resources {
          key instance_number;
          config  false;   // should be same as key leaf
          description
            "3301: The humidity sensor is composed of a set of instances";
           leaf instance_number {
               type uint16{
                    range "0..1";   // only one instance zero (0)
               }
               config false;    // R access
               mandatory "true";
               description
                "the number of the humidity sensor instance";
            }  // instance number
            container Sensor_Value  {
               description
                  "Resource separated in identifier and content";
               leaf identifier{
                   type uint16;   // fixed to 5700
                   config false;  // R access
                   description
                     "identifier should contain the value 5700";
               }
               leaf content{
                  type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
                  units "Defined by 'Units' resource";
                  config false;    // R access
                  mandatory "true";
                  description
                   "5700: Last or Current Measured Value from the Sensor";
                }  // content
            }  // container
            container Units {
               description
                  "Resource separated in identifier and content";
               leaf identifier{
                   type uint16;   // fixed to 5701
                   config false;  // R access
                   description
                     "identifier should contain the value 5701";
               }
               leaf content{
                  type string;
                  units "Defined by 'Units' resource";
                  config false;    // R access
                  description
                   "5701: Measurement unit definition e.g. 'Cel' for temperature in Celsius";
                }  // content
            }  // container
            container Min_Measured_Value {
               description
                  "Resource separated in identifier and content";
               leaf identifier{
                   type uint16;   // fixed to 5601
                   config false;  // R access
                   description
                     "identifier should contain the value 5601";
               }  // identifier
               leaf content{
                  type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
                  units "Defined by 'Units' resource";
                  config false;    // R access
                  description
                   "5601: The minimum value measured by the sensor since power ON or reset";
               }  // content
            }
            container Max_Measured_Value {
               description
                  "Resource separated in identifier and content";
               leaf identifier{
                   type uint16;   // fixed to 5602
                   config false;  // R access
                   description
                     "identifier should contain the value 5602";
               }
               leaf content{
                  type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
                  units "Defined by 'Units' resource";
                  config false;    // R access
                  description
                   "5602: The maximum value measured by the sensor since power ON or reset";
                }  // content
            }  // container
            container Min_Range_Value {
               description
                  "Resource separated in identifier and content";
               leaf identifier{
                   type uint16;   // fixed to 5603
                   config false;  // R access
                   description
                     "identifier should contain the value 5603";
               }  // identifier
               leaf content{
                  type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
                  units "Defined by 'Units' resource";
                  config false;    // R access
                  description
                   "5603: The minimum value that can be measured by the sensor";
                }  // content
            }  // container
            container Max_Range_Value{
               description
                  "Resource separated in identifier and content";
               leaf identifier{
                   type uint16;   // fixed to 5604
                   config false;  // R access
                   description
                     "identifier should contain the value 5604";
               }  // identifier
               leaf content{
                  type decimal64{    // YANG has no float
                       fraction-digits 2;
                       range "10.0 .. 66.6";}
                  units "Defined by 'Units' resource";
                  config false;    // R access
                  description
                   "5604: The maximum value that can be measured by the sensor";
                }  // content
            }
            container Reset_Min_and_Max_measured_values {
               description
                  "Resource separated in identifier and action";
               leaf identifier{
                   type uint16;   // fixed to 5605
                   config false;  // R access
                   description
                     "identifier should contain the value 5605";
               }
               action reset{ // E access: this is an RPC without input and output parameters
                  description
                     "5605: Reset the Min and Max measured values to current value";
               } // action  reset
            } // container Reset_min_and_max
        }  // list resources
     }  // container IPSO-humidity (3301)
} // module ietf-yang-humidity

<CODE ENDS>

]]></artwork>
    </figure>


</section>


</back>

</rfc>
