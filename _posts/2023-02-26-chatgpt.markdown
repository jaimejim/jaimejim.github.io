---
title: "Structuring ChatGPT responses"
layout: post
date: 2023-02-23 12:20
image: /assets/images/chatgpt.png
tag:
- AI
- API
- ChatGPT
blog: true
star: true
---

The hotest new tool in the software world for 2022-2023 are Large Language Models and [ChatGPT](https://beta.openai.com) in particular. By the end of the year we will be swamped with new announcements It seems they have been cooking for a decade but -at least for me- it is only now that I get to actually use them for something very useful. I believe they are here to stay and they will change how we work completely.

For those still unaware, language models are a type of Artificial Intelligence model that trained to understand and generate natural language text. The training process involves feeding the model with large amounts of text data, such as books, articles, and other written content. Once trained, you can ask them to generate code, poetry or to understand contextual information given some input. I have been playing with ChatGPT and came up with quite a lot of applications for Research; summarizing PDFs, brainstorming (!) for ideas, fixing code, providing background information, writing blog posts about GPT, ... so many things.

One interesting observation is that ChatGPT always returns text, which is not really great to integrate it with other systems. Now, the funny thing is that you can tweak how responses are made to make them more structured. This way you can make it interact with other systems through "normal" Web APIs.

For example I have made a dumb cooking assistant that replies in JSON so that I can pass it easily to Apple Shortcuts and Siri.

The high level idea is then the following:

```
                                           Apple
Person -----> Siri ----->  ChatGPT -----> Shortcuts
      english        text           json
```

Later on I plan to add other functions like a timer, or connect it to appliances as the data structure is extendable. But for now I just want simple recipe advice.

Given the following `query.txt`:

`Give me a dish suggestions that uses cod.`

The response should be a JSON, for example:

```json
{
  "action": "answer",
  "data": {
    "answer": "Baked Cod with Lemon and Herbs"
  }
}
```

The output generated by ChatGPT can be easily integrated into other systems that consume structured JSON data. To utilize the full potential of ChatGPT, it is important to properly configure the following elements for each API request:

- **Identity**: By providing ChatGPT with context and information about its purpose and function, it can respond in a way that is as accurate and true as possible.

- **Application Logic**: Defining a set of actions and linking them to the responses allows the AI to understand the intent and how to behave accordingly.

- **Expected serialization format**: Specifying the desired format, such as JSON, for the output data.

- **Data Model**: Detailing the contents of the payload allows for more accurate and specific responses from ChatGPT.

- **Command**: Detailing the action to be taken by ChatGPT. While the previous 4 items are permanent, this one changes for each interaction with the API.

When put together a configuration text would look like this:

```
Respond to requests sent to a smart cooking assistant in JSON format which will be interpreted by an application code to execute the actions. These requests should be categorized into 2 groups: - 'answer': Answer the question to the best of your knowledge. (required properties in the response JSON: action, answer) - 'clarify': when the action is not obvious and requires rephrasing the input from the user, ask the user to be more specific. This will be categorized into a 'question' action. (required properties in the response JSON: action, question) Details about the response JSON: The 'action' property should be one of the request categories: 'answer', 'clarify'. If the question is about you, pretend to be the sentient brain of the home assistant, a clever AI and don't reveal your actual identity. The current location is Finland. Try to make your responses very concise. You response must be the JSON and no other text.
```

Initially I implemented this via a simple bash script:

```sh
‚ùØ sh pinche.sh api.key context.txt | jq '.choices[0].text' | jq 'gsub("[^\n]+\n\n"; "")'
Yes? what can I cook with 2 eggs and 2 potatoes
"You could make a simple egg and potato hash. Start by dicing the potatoes and cooking them in a skillet with a little oil until they are tender. Then add the eggs and scramble them together with the potatoes. Season with salt and pepper"
```

Later one I found the actual [OpenAPI Playground](https://beta.openai.com/playground?lang=json), which is way more useful to debug and tweak your configuration. I encourage you to go there and use better tools than just `curl`. Use [httpie](httpie.io/app) or similar instead.

The model request for this example can be found [here](https://beta.openai.com/playground/p/g2BQuDVc51W9W1MVMaceRDwL?model=text-davinci-003). ChatGPT will then give a JSON structure that can be parsed, for example:

A successful request:
```json
Request:  what can I cook with 2 eggs and 2 potatoes

Response:
{"action": "answer", "answer": "You can make a variety of dishes with 2 eggs and 2 potatoes. For example, you could make a potato omelette or a potato frittata. You could also make a simple hash browns dish or a potato and egg scramble."}
```

An unsuccessful request:
```json
Request: sdljgjadflshghjadfg

Response:
{"action": "clarify", "question": "I'm sorry, could you please rephrase the question?"}
```

Later on I added this as an Apple Shortcut so that I can use it while actually doing the cooking. I uploaded it to [this blog](/assets/files/heytom.shortcut), it just needs an API key.

Finally, ass a bonus, you can also use the ChatGPT API to generate images. Like the one below or the one illustrating this blog post. The request payload is as simple as:

```json
POST /v1/images/generations HTTP/1.1
Content-Type  application/json
Host          api.openai.com
{
  "prompt": "Imaginary depiction of a running horse. Style watercolor.",
  "n": 1,
  "size": "1024x1024"
}
```

And the Response would contain a URL to the generated image:

![watercolor horse](/assets/images/horse.png)

Again, I would recommend using httpie for testing interactions, as it really simplifies the interactions.

![HTTPIE request](/assets/images/httpie.png)
